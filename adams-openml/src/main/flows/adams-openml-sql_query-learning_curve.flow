# Project: adams
# Date: 2014-04-17 16:40:59
# User: fracpete
# Charset: UTF-8
#
adams.flow.control.Flow
	-annotation
	Demonstrates how to run an SQL query and display the learning curve\nreturned for dataset \"anneal\" for the RandomForest classifier.
	-actor
		adams.flow.standalone.CallableActors
			-actor
				adams.flow.sink.JsonDisplay
					-writer
						adams.gui.print.NullWriter
					-preview
					true
			-actor
				adams.flow.sink.SpreadSheetDisplay
					-x
					-3
					-writer
						adams.data.io.output.NullWriter
			-actor
				adams.flow.sink.SequencePlotter
					-width
					1000
					-height
					400
					-x
					-3
					-y
					-3
					-writer
						adams.gui.print.NullWriter
					-paintlet
						adams.gui.visualization.sequence.PaintletWithFixedYRange
							-min-y
							0.85
							-max-y
							1.0
							-paintlet
								adams.gui.visualization.sequence.LinePaintlet
					-overlay-paintlet
						adams.gui.visualization.sequence.CirclePaintlet
					-marker-paintlet
						adams.flow.sink.sequenceplotter.NoMarkers
					-error-paintlet
						adams.flow.sink.sequenceplotter.SimpleErrorPaintlet
					-color-provider
						adams.gui.visualization.core.DefaultColorProvider
					-overlay-color-provider
						adams.gui.visualization.core.DefaultColorProvider
					-title
					RandomForest/anneal
					-axis-x
						adams.gui.visualization.core.AxisPanelOptions
							-label
							sample size
							-tick-generator
								adams.gui.visualization.core.axis.FancyTickGenerator
							-nth-value
							2
							-width
							40
							-top-margin
							0.05
							-bottom-margin
							0.05
							-custom-format
							0
					-axis-y
						adams.gui.visualization.core.AxisPanelOptions
							-label
							accuracy
							-tick-generator
								adams.gui.visualization.core.axis.FancyTickGenerator
							-nth-value
							1
							-width
							70
							-custom-format
							0.00
					-plot-updater
						adams.flow.sink.sequenceplotter.SimplePlotUpdater
							-update-interval
							-1
					-post-processor
						adams.flow.sink.sequenceplotter.PassThrough
	-actor
		adams.flow.standalone.OpenMLConnection
	-actor
		adams.flow.source.OpenMLSqlQuery
			-query
			SELECT \n  `e`.`sample_size`, \n  CONCAT(`i`.`name`,\" on Task \",`r`.`task_id`, \": \", `d`.`name`) AS `name`,\n  avg(`e`.`value`) as `avg_score`,\n  min(`e`.`value`) as `min_score`,\n  max(`e`.`value`) as `max_score`\nFROM \n  `run` `r`, \n  `evaluation_sample` `e`, \n  `algorithm_setup` `a`, \n  `implementation` `i`, \n  `task` `t`, \n  `task_values` `v`, \n  `dataset` `d` \nWHERE \n  `e`.`function` = \"predictive_accuracy\" \n  AND `t`.`ttid` = 3 \n  AND `v`.`input` = 1  \n  AND `d`.`name` IN (\"anneal\")  \n  AND `i`.`fullName` IN (\"weka.RandomForest(1)\") \n  AND `r`.`rid` = `e`.`source` \n  AND `r`.`setup` = `a`.`sid` \n  AND `a`.`implementation_id` = `i`.`id` \n  AND `r`.`task_id` = `t`.`task_id` \n  AND `t`.`task_id` = `v`.`task_id` \n  AND `v`.`value` = `d`.`did` \nGROUP BY \n  `r`.`rid`,`e`.`sample` \nORDER BY \n  `sample`, `name` ASC
	-actor
		adams.flow.control.Tee
			-name
			display json
			-tee
				adams.flow.sink.CallableSink
					-callable
					JsonDisplay
	-actor
		adams.flow.control.Tee
			-name
			table/plot
			-tee
				adams.flow.transformer.Convert
					-conversion
						adams.data.conversion.OpenMLJsonToSpreadSheet
			-tee
				adams.flow.transformer.SpreadSheetSort
			-tee
				adams.flow.control.Tee
					-name
					table
					-tee
						adams.flow.sink.CallableSink
							-callable
							SpreadSheetDisplay
			-tee
				adams.flow.control.Tee
					-name
					plot
					-tee
						adams.flow.transformer.SpreadSheetPlotGenerator
							-generator
								adams.flow.transformer.plotgenerator.XYWithErrorsPlotGenerator
									-y-column
									3
									-x-column
									1
									-y-error-columns
									4,5
									-meta-data-columns
									2
					-tee
						adams.flow.sink.CallableSink
							-callable
							SequencePlotter
	-flow-execution-listener
		adams.flow.execution.NullListener

